{
  "name": "kakuen",
  "version": "4.2.0",
  "author": {
    "name": "homerquan",
    "email": "support@homerquan.com"
  },
  "description": "a simple zero-configuration restful service mockup tool",
  "contributors": [
    {
      "name": "Homer Quan",
      "email": "support@homerquan.com"
    }
  ],
  "main": "./server/kakuen-server",
  "repository": {
    "type": "git",
    "url": "https://github.com/homerquan/kakuen.git"
  },
  "keywords": [
    "kakuen",
    "mockup",
    "restful"
  ],
  "dependencies": {
    "express": "3.4.4",
    "chokidar": "0.7.1",
    "underscore": "1.5.2",
    "chance": "0.5.4",
    "JSONPath": "0.9.1"
  },
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/homerquan/kakuen/issues"
  },
  "homepage": "https://github.com/homerquan/kakuen",
  "readme": "![alt tag](https://imagizer.imageshack.us/v2/240x250q90/c/19/68t6.png)\r\nkakuen\r\n======\r\n\r\n[![Build Status](https://travis-ci.org/homerquan/kakuen.png?branch=master)](https://travis-ci.org/homerquan/kakuen)\r\n\r\nWrite by [homerquan](http://www.homerquan.com)\r\n\r\n## What's kakun\r\n\r\nMock up RESTful webservices simply by editing text files, e.g., \r\n  1. `GET__#book#123#authors.json  ==> GET /book/123/authors`\r\n  2. `POST__#book@id=123.json ==> POST /book?id=123`\r\n  \r\nFor json, a schema-based mockup is supported, e.g., in ``sample_server/mocks/GET__#search@q=js.json``\r\n  * for single item <pre><code>\r\n\t\t\"@KAKUEN_ITEM(offset)\": {\r\n\t\t\t\"@KAKUEN_TYPE\": \"natural\",\r\n\t\t\t\"@KAKUEN_PARAM\": {\r\n\t\t\t\t\"min\": 1,\r\n\t\t\t\t\"max\": 20\r\n\t\t\t}\r\n\t\t}\r\n  </code></pre>\r\n  will be ``offset:12``\r\n  * for collection <pre><code>\r\n       \"@KAKUEN_COLLECTION(data)(10)\": {\r\n\t\t\"name\": {\r\n\t\t\t\"@KAKUEN_TYPE\": \"name\",\r\n\t\t\t\"@KAKUEN_PARAM\": {\r\n\t\t\t\t\"middle_initial\": true\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"cover-image\": {\r\n\t\t\t\"@KAKUEN_TYPE\": \"image\",\r\n\t\t\t\"@KAKUEN_PARAM\": {\r\n\t\t\t\t\"w\": 165,\r\n\t\t\t\t\"h\": 165,\r\n\t\t\t\t\"topic\": \"sports\"\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n  </code></pre>\r\n  will be <pre><code>\r\n   [\r\n     {\r\n      name: \"Leo B. McCarthy\",\r\n      cover-image: \"http://lorempixel.com/165/165/sports\"\r\n     },\r\n     ... and 9 more\r\n   ]\r\n  </code></pre>\r\n\r\n## Quick start\r\n\r\n  1. Install\r\n\r\n   $ npm install kakuen\r\n\r\n  1. Launch the sample server or create your own by using kakuen as a handler in express e.g., server.js <pre><code>\r\n    var express=require('express'),\r\n    kakuen=require('kakuen'),\r\n    server=express(),\r\n    moker=kakuen.mocker;\r\n\r\n    server.use(moker);\r\n    server.listen(8005);\r\n    </code></pre>\r\n  1. Put mockup files in \"mocks\" at the root directory of your node app (or specify it: `` export KAKUEN_MOCKS_FOLDER=\"your_mocks_folder\" `` ). Then adding or editing your own json or xml files under 'mocks' in the format:``<method>__#url.[xml|json]`` e.g., ``GET__#book@id=123.json`` ('#' to replace '/', '@' to replace '?')\r\n    E.g., \r\n    * DELETE__#book@id=123.json     (DELETE /book?id=123   \r\n    * GET__#book@id=1234&type=0.xml (GET /book?id=1234&type=0)  \r\n  1. Finally Start the server and access mocks\r\n    E.g.,\r\n    * ``curl http://localhost:8005/book?id=123``\r\n    * ``curl http://localhost:8005/search?q=java``\r\n    * ``curl http://localhost:8005/search?q=js``\r\n\r\n## Generating mockup data by type\r\n  * all data types in the document of [chance.js](http://chancejs.com/), such as person name, address, ipv6 ...\r\n    e.g., \r\n    ``chance.month({raw: true});`` \r\n    will be <pre><code>\r\n       \"@KAKUEN_TYPE\": \"month\",\r\n       \"@KAKUEN_PARAM\": {\r\n\t   \"raw\": true,\r\n       }\r\n    </code></pre>\r\n    \r\n  * image from [lorempixel.com](http://lorempixel.com), which needs to specify weight, height, and topic (option) e.g.,    <pre><code>\r\n   \"cover-image\": {\r\n\t\"@KAKUEN_TYPE\": \"image\",\r\n\t\"@KAKUEN_PARAM\": {\r\n\t\t\"w\": 165,\r\n\t\t\"h\": 165,\r\n\t\t\"topic\": \"sports\"\r\n\t}\r\n   }\r\n   </code></pre>\r\n  \r\n\r\n## Features\r\n  \r\n  * actively monitoring change in mock files.\r\n  * support both json and xml \r\n  * support scheme (for json only)\r\n  * support random typed data generator (for json only)\r\n  \r\n## Change log\r\n  * v4.0.0 add schema-based mockup using chance data generator\r\n  * v3.5.4 fix file name in windows system  \r\n\r\n## License\r\nThe MIT license.\r\n\r\nCopyright (c) 2013 Homer Quan (http://www.homerquan.com)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\nof the Software, and to permit persons to whom the Software is furnished to do\r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n",
  "_id": "kakuen@4.2.0",
  "_from": "kakuen@4.2.x"
}
